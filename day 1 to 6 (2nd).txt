Day 1
Grade
-----
/*
        Name : Prashantika
        Date : 23/08/2021
        Description : Fnd average of the maths, physics and chemistry marks of the student and display respective grade
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace grading
{
    class Program
    {

        public static void AverageMarks(int m, int p, int c)
        {
            int avg = (m + p + c) / 3;
            String res = " ";
            if (avg > 90)
            {
                res = "Grade A";
            }
            else if (avg > 80 && avg <= 90)
            {
                res = "Grade B";
            }
            else if (avg > 70 && avg <= 80)
            {
                res = "Grade C";
            }
            else
            {
                if (avg <= 35)
                {
                    res = "Grade D";
                }
            }

            Console.WriteLine($"Total Marks " + (m + p + c));
            Console.WriteLine(res);
            Console.ReadKey();

        }
        static void Main(string[] args)
        {
            int maths, physics, chemistry;
            Console.WriteLine("Enter Maths Marks : ");
            maths = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter Physics Marks : ");
            physics = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter Chemistry Marks : ");
            chemistry = Convert.ToInt32(Console.ReadLine());

            // Console.WriteLine("Grade" + AverageMarks(maths, physics, chemistry));
            AverageMarks(maths, physics, chemistry);


        }
    }
}
*************************************************************************************************************************************************
Day 1
Search Name
-----------

/*
 *  Author : Prashantika
 *  Date : 23/08/21
 *  Description : Search for the given string
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SearchName
{
    class Program
    {
        static void Main(string[] args)
        {
            String[] names =new String[10];
            for(int n=0;n<names.Length;n++)
            {
                Console.WriteLine("Enter person name "+(n+1) );
                names[n] = Console.ReadLine();
            }
            String key;
            Console.WriteLine("Enter the name of the person to be searched");
            key = Console.ReadLine();
            int flag = 1;
            foreach(String name in names)
            {
                if(String.Equals(name,key))
                 {
                    flag = 0;  
                    break;
                }
                else
                {
                   
                    continue;
                }
            }
            if(flag == 0)
            {
                Console.WriteLine(key + "found");
            }
            else
            {
                Console.WriteLine(key + " not found");
            }
            Console.ReadKey();

        }
    }
}

**************************************************************************************************************************************************
Day 1
Arithmetic operations
---------------------

/*
        Name : Prashantika
        Date : 23/08/2021
        Description : Perform arithmetic operations using switch case
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SwitchCase_ArithmeticOperations
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Arithmetic Operations");
            Console.WriteLine("1 -  Add");
            Console.WriteLine("2 - Subtract");
            Console.WriteLine("3 - Multiply");
            Console.WriteLine("4 - Division");
            Console.WriteLine("5 - Remainder");
           Console.WriteLine("Enter you choice");
            int choice = Convert.ToInt32(Console.ReadLine()); // ReadLine returns string data, so explcit conversion to int data
            Console.WriteLine("Enter value of a"); // 
            int a = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter value of b");
            int b = Convert.ToInt32(Console.ReadLine());
            switch (choice)
            {
                case 1: Console.WriteLine($"{a}+{b}="+(a + b)); // {a} - prints the value stored in a, won,t print "a"
                    break;
                case 2:
                    Console.WriteLine($"{a}-{b}=" + (a - b));
                    break;
                case 3:
                    Console.WriteLine($"{a}*{b}=" + (a * b));
                    break;
                case 4:
                    Console.WriteLine($"{a}/{b}=" + (a / b));
                    break;
                case 5:
                    Console.WriteLine($"{a}%{b}=" + (a % b));
                    break;
                default:
                    Console.WriteLine("Invalid Option");
                    break;

            }
            Console.ReadKey();
             



        }
    }
}

**************************************************************************************************************************************************

Day 1
Transpose of a matrix
---------------------

/*
        Name : Prashantika
        Date : 23/08/2021
        Description : Fnd transpose of a 2X2 matrix
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TransposeOfAMatrix
{
    class Program
    {
        static void Main(string[] args)
        {
            int[,] matrix = new int[2,2];
            int[,] result = new int[2, 2];
            Console.WriteLine("Enter 2X2 matrix");
            for(int r=0;r<matrix.GetLength(0);r++)
            {
                for (int c = 0; c < matrix.GetLength(1); c++)
                {
                       matrix[r,c]=Convert.ToInt32(Console.ReadLine());
                }
            }
            for (int r = 0; r < matrix.GetLength(0); r++)
            {
                for (int c = 0; c < matrix.GetLength(1); c++)
                {
                  result[r,c]= matrix[c,r]; // transpose of a matrix = interchange rows and columns
                }
            }
            Console.WriteLine("Before Transpose Of The Matrix");
            for (int r = 0; r < matrix.GetLength(0); r++)
            {
                for (int c = 0; c < matrix.GetLength(1); c++)
                {
                     Console.Write(matrix[r, c]);
                    Console.Write("\t");
                }
                Console.WriteLine();
            }
            Console.WriteLine("After Transpose Of The Matrix");
            for (int r = 0; r < result.GetLength(0); r++)
            {
                for (int c = 0; c<  result.GetLength(1); c++)
                {
                    Console.Write(result[r, c]);
                    Console.Write("\t");
                }
                Console.WriteLine();
            }

            Console.ReadKey();
        }
    }
}

**************************************************************************************************************************************************

Day 2
Restuarant Manager
------------------

Order.cs
/* Name : Prashantika
 * Date: 24/08/2021
 * Description : interface topic
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RestuarantManager
{
    public class Order : IOrder, ICancellable
    {
        // make properties and methods of interface public here in the child class
      public  void Cancel()
        {
            this.Status = "Cancelled";
        }
       public  int Id { set; get; }
        
        public String Status { set; get; }
        
      public  void Confirm()
        {
            this.Status = "Confirmed";
        }
        public string CustomerName { set; get; }
        public DateTime OrderDate { set; get; }
        public double OrderAmount { set; get; }

    }
}

______

ICancellable.cs
---------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RestuarantManager
{
   public  interface ICancellable
    {
        void Cancel();
    }
}

___________
IOrder.cs
--------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RestuarantManager
{
   public interface IOrder
    {
        int Id { set; get; }
        // public int ID {set; get;} inside the interface - is throwing error
        String Status { set; get; }
        //abstract void Confirm();
        // in interface, every method is abstract method
        void Confirm();


    }
}


__________
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RestuarantManager
{
    class Program
    {
        static void Main(string[] args)
        {
            var obj = new Order();
            Console.WriteLine("Enter Order Id");
            obj.Id = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("enter the Customer Name");
            obj.CustomerName = Console.ReadLine();
            Console.WriteLine("enter the date ");
            obj.OrderDate = Convert.ToDateTime(Console.ReadLine());
            Console.WriteLine("enter the amount");
            obj.OrderAmount = Convert.ToDouble(Console.ReadLine());
            Console.WriteLine("Option Available");
            
            Console.WriteLine("1 - Confirm");
            Console.WriteLine("2 - Cancel");
            int choice = Convert.ToInt32(Console.ReadLine());
            double amount = 0;
            switch (choice)
            {
                case 1:
                    obj.Confirm();
                    Console.WriteLine("Status is"+obj.Status);
                    break;
                case 2:
                    obj.Cancel();
                    Console.WriteLine("Status is" + obj.Status);
                    break;
                defualt:
                    Console.WriteLine("Invalid options");
                    break;

            }
            Console.ReadKey();
        }
    }
}

**************************************************************************************************************************************************
Day 2
Order Management System
-----------------------

/*
 *  Name : Prashantika
 *  Date : 24/08/2021
 *  Description : Create Order class which calculates order amount based on quantity and price and display order 
 *  details
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace order_management_system
{
    class Order
    {
        // properties
        public int OrderID { set; get; }
        public string CustomerName { set; get; }
        public DateTime OrderDate { set; get; }
        public string ProductName { set; get; }
        public int Price { set; get; }
        public int Quantity { set; get; }
        // instance variable
        private int orderAmount; // to store the fixed data( claculation) use it as instance variable
        public int OrderAmount { get; } // read only property

        // methods
        public void CalculateOrderAmount()
        {
            this.orderAmount =this.Quantity * this.Price; // price * quantity is the amout to be paid
        }
        public void PrintOrderDetails()
        {
            Console.WriteLine($"\n The Details are\n Id {OrderID}\n Customer {CustomerName}\n Product {ProductName}\n" +
                $" Quality  {Quantity} \n" + $" Date {OrderDate.ToShortDateString()}\n Total Amount Rs. {orderAmount}");
        }
    }
}



_____

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace order_management_system
{
    class Program
    {       static void Main(string[] args)
        {
            var order = new Order();
            Console.WriteLine("Please enter the order details");
            Console.WriteLine("enter the order id");
            order.OrderID = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("enter the Customer Name");
            order.CustomerName = Console.ReadLine();
            Console.WriteLine("enter the date");
            order.OrderDate = Convert.ToDateTime(Console.ReadLine());
            Console.WriteLine("enter the product name");
            order.ProductName = Console.ReadLine();
            Console.WriteLine("enter the cost");
            order.Price = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("enter the quantity");
            order.Quantity = Convert.ToInt32(Console.ReadLine());
            order.CalculateOrderAmount();
            order.PrintOrderDetails();
            Console.ReadKey();
        }
    }
}


**************************************************************************************************************************************************
Day 2
Accounts
-----------------------
/*
 *  Name : Prashantika
 *  Date : 24/08/2021
 *  description : Amount deposit and withdraw of an Savings Account
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AccountAssignment
{
  public abstract class  Account
    {
       // public int accountno;
        public double AccountNo
        {
            get;set;
        }

        //public double balance;
        public double Balance { get; set; }
        public string CustomerName { get; set; }

        public void Deposit(double amount)
        {
            Balance += amount;
        }
        public abstract void Withdraw(double amount); 
    }
    public class SavingsAccount: Account
    {
        public SavingsAccount()
        {
            Balance = 2000;
        }
        public override void Withdraw(double amount) // to implement abstract method of abstract class in child class
                                                     // use override key word in the function header
        {
            if ((Balance - amount) < 500)
            {
                Console.WriteLine(" Operations not supported. Minimum balance must be maintained ");
            }
            else
            {
                Balance -= amount;
            }

        }

    }
}

_____
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace AccountAssignment
{
    class Program
    {
        static void Main(string[] args)
        {
            var savings = new SavingsAccount();
            Console.WriteLine("Enter Account no:");
            savings.AccountNo = Convert.ToDouble(Console.ReadLine());
            Console.WriteLine("Enter Customer Name:");
            savings.CustomerName = Console.ReadLine();
            Console.WriteLine("Option Available");
            Console.WriteLine("1 - Withdraw");
            Console.WriteLine("2 - Deposit");
            int choice = Convert.ToInt32(Console.ReadLine());
            double amount = 0;
            switch(choice)
            {
                case 1 : Console.WriteLine("Amount to be withdraw");
                         amount = Convert.ToDouble(Console.ReadLine());
                         savings.Withdraw(amount);
                         Console.WriteLine("Balance Amount is "+savings.Balance);
                         break;
                case 2:
                    Console.WriteLine("Amount to be added");
                    amount = Convert.ToDouble(Console.ReadLine());
                    savings.Deposit(amount);
                    Console.WriteLine("Balance Amount is "+savings.Balance);
                    break;
                defualt:
                    Console.WriteLine("Invalid options");
                    break;

            }
            Console.ReadKey();
        }
    }
}



**************************************************************************************************************************************************
day 3
xyz
-----

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace XyzBankLtd // name of the project
{
    public class Account // name of the class created
    {
        //  properties
        public double AccountNo { set; get; }
        public string CustomerName { set; get; }
        private double balance; // field or member
        public double Balance { get { return balance; } } // read only property



      /*
        public Account()
        {
            // minimum balance
            balance = 2000;
        } */

        // methods
        public void Withdraw(double amount)
        {

            
                if (amount > balance)
                {
                    throw new ArgumentException("Insufficient Balnace");

                }
                else
                {
                    balance -= amount;
                }

            

        }
        public void Deposit(double amount)
        {
            
                if (amount <= 0)
                {
                    throw new ArgumentException("Invalid value for amount");
                }
                else
                {
                    balance += amount;
                }
           


        }

        public override string ToString()
        {
            return $"Account no: {this.AccountNo} \nName: {this.CustomerName} \nBalance: {this.Balance}";
        }


    }
}


/*
 *          Name : Prashantika
 *          Date : 25/08/2021
 *          Description : XYZ BANK LTD , allows users to withdraw and deposit the amount in an account.
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace XyzBankLtd
{
    class Program
    {
        static void Main(string[] args)
        {
            Account account = new Account();
            Console.WriteLine("Enter Account no:");
            account.AccountNo = Convert.ToDouble(Console.ReadLine());
            Console.WriteLine("Enter Customer Name:");
            account.CustomerName = Console.ReadLine();
            Console.WriteLine("Available Balance is " + account.Balance);
            try
            {
                while (true)
                {
                    Console.WriteLine("Option Available");
                    Console.WriteLine("1 - Withdraw");
                    Console.WriteLine("2 - Deposit");
                    Console.WriteLine("3 - Exit");
                    int choice = Convert.ToInt32(Console.ReadLine());
                    double amount = 0;

                    switch (choice)
                    {
                        case 1:
                            Console.WriteLine("Amount to be withdraw");

                            amount = Convert.ToDouble(Console.ReadLine());
                            account.Withdraw(amount);
                            // Console.WriteLine("Balance amount is " + account.Balance);
                            Console.WriteLine(account.ToString());
                            break;
                        case 2:
                            Console.WriteLine("Amount to be added");
                            amount = Convert.ToDouble(Console.ReadLine());
                            account.Deposit(amount);
                            // Console.WriteLine("Balance Amount is " + account.Balance);
                            Console.WriteLine(account.ToString());
                            break;
                        case 3:
                            Environment.Exit(0); break;
                        defualt:
                            Console.WriteLine("Invalid options");
                            break;

                    }
                }
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
            }
            Console.ReadKey();
        }
    }
}

**************************************************************************************************************************************************

Day 3
Menu Based List
---------------

/*
 *  Name: Prashantika
 *  Date: 25-8-2021
 *  Description: Menu based list
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MenuBasedList
{
   public  class Program
    {
        // Making EmployeeList global paramaters so all methods can access it, since methods are static, static methods
        // can access only static variables. So making Employee LIst as static variable
        static List <Employee> EmployeeList = new List<Employee>(); 
        static void Add()
        {
            Console.WriteLine("Adding Employee Details");
            // create object of the class to access members of the class
         //   var AddEmployee = new Employee();
            Employee AddEmployee = new Employee();
            Console.WriteLine("Enter Id");
            AddEmployee.Id = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter Name");
            AddEmployee.Name = Console.ReadLine();
            Console.WriteLine("Enter Email");
            AddEmployee.Email = Console.ReadLine();
            Console.WriteLine("Enter Salary");
            AddEmployee.Salary = Convert.ToDouble(Console.ReadLine());
            Console.WriteLine("Enter Location");
            AddEmployee.Location = Console.ReadLine();

            // Add employee details to the EmployeeList Collection
            EmployeeList.Add(AddEmployee);
            Console.WriteLine("Details succefully added");
        }

        static void Display()
        {
            Employee DisplayEmployee = new Employee();
            foreach (Employee employee in EmployeeList )
            {
                Console.WriteLine(employee.ToString()); ;
            }
        }

        static void Delete()
        {
            Employee DeleteEmployee = new Employee();
            Console.WriteLine("Enter ID for deleting");
            DeleteEmployee.Id = Convert.ToInt32(Console.ReadLine());
            int index = EmployeeList.BinarySearch(DeleteEmployee);
            if (index >= 0)
            {
                Console.WriteLine("Emplyee details deleted are");
                Console.WriteLine(EmployeeList[index]);
                //  EmployeeList.Remove(DeleteEmployee); 
                Employee emp =  EmployeeList[index];
                EmployeeList.Remove(emp);
            }
            else
            {
                Console.WriteLine($"{DeleteEmployee.Id} doesn't exists, please give valid ID");
            }

        }
        static void Update()
        {

            Employee UpdateEmployee = new Employee();
            Console.WriteLine("Enter ID for updating");
            UpdateEmployee.Id = Convert.ToInt32(Console.ReadLine());
            int index = EmployeeList.BinarySearch(UpdateEmployee);
            if (index >= 0)
            {
                // respective employee id's details to be updated
                Employee EmployeeToBeUpdate = EmployeeList[index];
                Console.WriteLine("Enter employee name");
                EmployeeToBeUpdate.Name = Console.ReadLine();
                Console.WriteLine("Enter employee email id");
                EmployeeToBeUpdate.Email= Console.ReadLine();
                Console.WriteLine("Enter Salary");
                EmployeeToBeUpdate.Salary = Convert.ToDouble(Console.ReadLine());
                Console.WriteLine("Enter Location name");
                EmployeeToBeUpdate.Location = Console.ReadLine();

                Console.WriteLine("Successfully Updated");
                Console.WriteLine("Updated Employee Details are");
                // Console.WriteLine(EmployeeList[index]);
                Console.WriteLine(EmployeeToBeUpdate.ToString());

            }
            else
            {
                Console.WriteLine($"{UpdateEmployee.Id} doesn't exists");
            }

        }

        static void Search()
        {

            Employee SearchEmployee = new Employee();
            Console.WriteLine("Enter ID for searching");
            SearchEmployee.Id = Convert.ToInt32(Console.ReadLine());
            int index = EmployeeList.BinarySearch(SearchEmployee);
            if (index >= 0)
            {
                
                Console.WriteLine("Employee Details are");
                 Console.WriteLine(EmployeeList[index]);
                

            }
            else
            {
                Console.WriteLine($"{SearchEmployee.Id} doesn't exists");
            }

        }


        static void Main(string[] args)
        {
            int choice = -1;
            while(true) // display menu again and again untill user wants to.
            {
                Console.WriteLine("Menu");
                Console.WriteLine("1.Add New Employee");
                Console.WriteLine("2.List All Employees");
                Console.WriteLine("3.Delete An Employee");
                Console.WriteLine("4.Search for an Employee");
                Console.WriteLine("5.Update Employee Details");
                Console.WriteLine("6.Exit");
                Console.WriteLine("Enter Your Choice:");
                choice = Convert.ToInt32(Console.ReadLine());
                switch(choice)
                {
                    case 1 : Add(); break;
                    case 2:  Display(); break;
                    case 3: Delete(); break;
                    case 4: Search(); break;
                    case 5: Update(); break;
                    case 6: Environment.Exit(0); break;
                    defualt: Console.WriteLine("Invalid Choice"); break;

                }


            }

            // Console.ReadKey();

        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MenuBasedList
{
   public class Employee : IComparable < Employee>
    {
        public int Id { set; get; }
        public string Name { set; get; }
        public string Email { set; get; }
        public double Salary { set; get; }
        public string Location { set; get; }

        // override ToString() of Object Class
        public override string ToString()
        {
            return $"Id: {this.Id} \nName: {this.Name} \nSalary: {this.Salary}" +
                $"Email: {this.Email} \nLocation: {this.Location}";
        }

        public int CompareTo(Employee obj)
        {
            return this.Id.CompareTo(obj.Id);
        }
    }
}


**************************************************************************************************************************************************

Day 3
RTO codes 
---------

/*
 *  Name: Prashantika
 *  Date: 25/08/2021
 *  Description : Dictionary - RTOCodes as keys and DistrictName as Values
 * 
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RTOCodes
{
  public  class Program
    {
        // create a dictionary with name dictionary
        static Dictionary<string, string> dictionary = new Dictionary<String, String>();
        // key
        static string RtoCodes;
        //value
        static string DistrictNames;
        static void Main(string[] args)
        {
            int choice = -1;
            while (true) // display menu again and again untill user wants to.
            {
                Console.WriteLine("Menu");
                Console.WriteLine("1.Add New RTOCode and District");
               
                Console.WriteLine("2. Remove district of given RTOCode");
                Console.WriteLine("3.List All RTOCodes and its respective districts");
                Console.WriteLine("4. Remove RTOCode and District name");
               
                Console.WriteLine("5..Exit");
                Console.WriteLine("Enter Your Choice:");
                choice = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case 1: Add(); break;
                    case 2: RemoveValue(); break;
                    case 3: Display(); break;
                    case 4: Delete(); break; // delets an item - both key and value
                    
                    case 5:
                        Environment.Exit(0); break;
                    defualt: Console.WriteLine("Invalid Choice"); break;

                }


            }
            void Add()
            {
                Console.WriteLine("Enter RTOCode");
                RtoCodes = Console.ReadLine();
                Console.WriteLine("Enter District Name");
                DistrictNames = Console.ReadLine();
                dictionary.Add(RtoCodes, DistrictNames);

            }
             void RemoveValue()
            {
                Console.WriteLine("Enter RTOCode which respective District  has to be deleted");
                RtoCodes = Console.ReadLine();
              
                
                   if(dictionary.ContainsKey(RtoCodes))
                    {
                    // DistrictNames = " ";
                    dictionary[RtoCodes] = " "; // setting value to null of respective key i.e, RtoCode
                       // dictionary.Remove(RtoCodes); // removes key and value of respective key
                    Console.WriteLine("Successfully deleted the value");
                    }
                    else
                    {
                        Console.WriteLine("Invalid Key");
                    }
                    Console.WriteLine("Remainig " + dictionary.Count);
              

            }
        void Display()
            { 
                foreach(KeyValuePair<string,string> KeyValue in dictionary)
                {
                    Console.WriteLine($"RTOCode: {KeyValue.Key} and DistrictName: {KeyValue.Value}");
                }
            }
           void Delete()
            {
                Console.WriteLine("Enter RTOCode of whcih has to be deleted");
                RtoCodes = Console.ReadLine();
                /* Console.WriteLine("Enter District of whcih has to be deleted");
                 DistrictNames = Console.ReadLine(); 
                 dictionary.Remove(DistrictNames); */
                  if (dictionary.ContainsKey(RtoCodes))
                   {
                       dictionary.Remove(RtoCodes); // removes key and value (item) of respective key
                       Console.WriteLine("Successfully deleted the item");
                       Console.WriteLine("Remainig "+dictionary.Count);
                   }
                   else
                   {
                       Console.WriteLine($"{RtoCodes} doesn't exits");
                   }
                

            }

            // Console.ReadKey();

        }
    }
}

****************************************************************************************************************************************************

Day 4

LINQ 
----
/*
 *  Name: Prashantika
 *  Date: 26-08-2021
 *  Description - LINQ - Collections
 *
 */
 using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinqCollection
{
    class Program
    {
        static void Main(string[] args)
        {


             List<Product> GetProducts() // this method returns list of Prodect objects
            {
                var products = new List<Product>() // created list and giving input values via calling
                                                // parameterized constructor
            {
                new Product(101,"Pendrive",1100, "Electronics", new DateTime(2021, 01, 01)),
                new Product(102,"WireLess KeyBoard",3000, "Electronics", new DateTime(2020, 12, 12)),
                new Product(103,"Wireless Mouse",1500, "Electronics", new DateTime(2021, 02, 12)),
                new Product(104,"Formal Shoes",3000, "Clothing", new DateTime(2021, 01, 10)),
                new Product(105,"Formal Shirt",2200, "Clothing", new DateTime(2020, 12, 01)),
            };
                return products;
            }

            var DataSource = GetProducts(); // returns list of objects - step1 common for all queries
             
            
            // task 1 - step 1
             // display all in ascending orderby thier names
            // query
            var query = from p in DataSource
                    orderby p.Name
                    select p;

            // step 2 - display output of the query
            Console.WriteLine("\n all prodcuts displayed ascending orderby thier names ");
            foreach (var prod in query)
            {
                Console.WriteLine(prod.ToString());
            }

            // task 2 - step 1
            // display all products from electronics category where price between 1000 and 2000
            // query
            var query2 = from p in DataSource
                        where p.Price>=1000 && p.Price<=2000 &&  p.Category =="Electronics"
                        select p;

            // step 2 - display output of the query

            Console.WriteLine("\n products from electronics category where price between 1000 and 2000 ");
            foreach (var prod in query2)
            {
                Console.WriteLine(prod.ToString());
            }

            // task 3- step 1
            // display all products whcih are created in 2021
            // query
            var query3 = from p in DataSource
                         where p.CreatedOn.Year==2021
                         select p;

            // step 2 - display output of the query

            Console.WriteLine("\n products which are created in year 2021");
            foreach (var prod in query2)
            {
                Console.WriteLine(prod.ToString());
            }

            Console.ReadKey();
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinqCollection
{
    class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Category { get; set; }
        public DateTime CreatedOn { get; set; }
        public double Price { get; set; }


        // parametrized constrcutor for initializing values

        public Product(int id, string name, double price, string category, DateTime co )
        {
            this.Id = id; this.Name = name; this.Category = category; this.CreatedOn = co; this.Price = price;
        }


        // display 
        public override string ToString()
        {
            return $"Id={this.Id}\t\t Name={this.Name}\t\t City={this.Category}\t\t Price ={ this.Price}" +

                 $"\t\t CreatedON ={ this.CreatedOn.ToShortDateString()}";
        }


    }
}


*****************************************************************************************************************************************************


Day4 
Multi Cast Delegates
--------------------

/*
 *  Name: Prashantika
 *  Date: 26-08-2021
 *  Description - Multi Cast delegates - Calling multiple methodsin single call of delegates
 *
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultiCastDelegate
{
    class Program
    {
        public  delegate void MultiDelegate (int Number1, int Number2); // create delegate
        static void Main(string[] args)
        {

            var CalObj = new Calculator();
            // create object + instantiate
            var Multi = new MultiDelegate(CalObj.Add);
            // add all refernces to delegate object using +
            Multi += CalObj.Multiply;
            Multi += CalObj.Subtract;
            Multi += CalObj.Divide;



            int Num1, Num2;
            Console.WriteLine("Enter 1st number");
            Num1 = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter 2nd number");
            Num2 = Convert.ToInt32(Console.ReadLine());
            


            // invoke delegate which in turn invokes all the methods
            Multi(Num1, Num2);

            Console.ReadKey();

        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultiCastDelegate
{
   public class Calculator
    {
       public void Add(int number1, int number2)
        {
            Console.WriteLine($"{number1}+{number2} = "+(number1 + number2));
        }
        public void Multiply(int number1, int number2)
        {
            Console.WriteLine($"{number1}*{number2} = " + (number1 * number2));

        }
        public void Subtract(int number1, int number2)
        {
            Console.WriteLine($"{number1}-{number2} = " + (number1 - number2));

        }
        public void Divide(int number1, int number2)
        {
            Console.WriteLine($"{number1}/{number2} = " + (number1/ number2));

        }


    }
}
**********************************************************************************************************************************************************
Day 5

ADO.net
-------

/*
 * Name:Prashantika
 * Date: 27/08/2021
 *  Desrciption: ADO.net - to connect to data source
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Data;
using System.Data.SqlClient;
using System.Configuration;

namespace ADONet
{
    class Program
    {
       static  string  connectionsString = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        // ConnectionString property returns
        static void Main(string[] args)
        {
            
            int choice = -1;
            while (true)
            {
                
                Console.WriteLine("\n1.Add new product");
                Console.WriteLine("2.Search a product");
                Console.WriteLine("3.Delete a product");
                Console.WriteLine("4.Display all products");
                Console.WriteLine("5.Exit");
                Console.WriteLine("\nEnter your choice");
                choice = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case 1: Add(); break;
                    case 2: Search(); break;
                    case 3: Delete(); break;
                    case 4: Display(); break;
                    case 5: Environment.Exit(0); break;
                    default:
                        Console.WriteLine("Invalid choice");
                        break;
                }
            }
        }

        private static void Search()
        {
            using (SqlConnection connection = new SqlConnection(connectionsString))
            {
                try
                {

                    Console.WriteLine("Enter the id");
                    int id = Convert.ToInt32(Console.ReadLine());
                    var query = $"select * from products where id ={id}";
                    var command = new SqlCommand(query, connection);
                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();
                    if (reader.HasRows)
                    {

                        string name = " ";
                        int price = 0;
                        string description = " ";
                        string isactive = " ";
                        Console.WriteLine($"Id\tName\tPrice\tDescription\tIsActive");
                        while (reader.Read())
                        {
                            id = reader.GetInt32(0);
                            name = reader.GetString(1);
                            price= reader.GetInt32(2);
                            description = reader.GetString(3);
                            isactive = reader.GetString(4);
                            Console.WriteLine("Details found");
                            Console.WriteLine($"{id}\t{name}\t{price}\t{description}\t{isactive}");
                        }
                    }
                    else
                    {
                        Console.WriteLine("No records found");
                    }
                    reader.Close();
                }
                catch (SqlException ex)
                {
                    Console.WriteLine(ex.Message);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                finally
                {
                    connection.Close();
                }
            }
        }

        private static void Delete()
        {
            using (SqlConnection connection = new SqlConnection(connectionsString))
            {
                try
                {


                    Console.WriteLine("Enter id");
                    int id = Convert.ToInt32(Console.ReadLine());



                    var query = $"delete from products where id = {id}";

                    SqlCommand command = new SqlCommand(query, connection);
                    connection.Open();
                    int RowsAffected = command.ExecuteNonQuery();
                    if (RowsAffected == 1)
                    {
                        Console.WriteLine("Product deleted");
                    }
                    else
                    {
                        Console.WriteLine("deletion was unsuccessfull");
                    }
                }
                catch (SqlException ex)
                {
                    Console.WriteLine(ex.Message);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                finally
                {
                    connection.Close();
                }
            }
        }

        private static void Add()
        {
            using (SqlConnection connection = new SqlConnection(connectionsString))
            {
                try
                {

                    // take details from user and insert those into the table
                    Console.WriteLine("Enter id");
                    int id = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine("Enter name");
                    string name = Console.ReadLine();
                    Console.WriteLine("Enter price");
                    decimal salary = Convert.ToDecimal(Console.ReadLine());
                    Console.WriteLine("Enter description");
                    string description = Console.ReadLine();
                    Console.WriteLine("Enter Active status");
                    string isActive = Console.ReadLine();

                    var query = $"insert into products values({ id}, '{name}',{ salary}, '{description}', '{isActive}')";

                    SqlCommand command = new SqlCommand(query, connection);
                    connection.Open();
                    int RowsAffected = command.ExecuteNonQuery();
                    if (RowsAffected == 1)
                    {
                        Console.WriteLine("Prodcut added");
                    }
                    else
                    {
                        Console.WriteLine("Failed to  add product");
                    }
                }
                catch (SqlException ex)
                {
                    Console.WriteLine(ex.Message);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                finally
                {
                    connection.Close();
                }
            }
        }

        private static void Display()
        {
            //disconnected architecture
            try
            {
                DataSet ds = new DataSet("PrdouctsDataset");
                var adapter = new SqlDataAdapter("select * from products", connectionsString);
                adapter.Fill(ds, "product");// product is name of the table in PraductsDataset dataset
                Console.WriteLine("Data set name : " + ds.DataSetName);
                Console.WriteLine("Total tables : " + ds.Tables.Count);

                
                DataTable dt = ds.Tables["product"];

                Console.WriteLine("0th Table Name : " + dt.TableName);
               
                foreach (DataRow row in dt.Rows)
                {
                    Console.WriteLine();
                    for (int i = 0; i < dt.Columns.Count; i++)
                    {
                        Console.Write(row[i] + "\t");
                    }
                }
            }
            catch (SqlException ex)
            {
                Console.WriteLine(ex.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

 }

___________________
App.config
----------

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6" />
    </startup>
    <connectionStrings>
		<add name ="dbconnection" connectionString="Data source=WINDOWS-UNR7VLH\SQLEXPRESS; database =day5; integrated security = true;"/>
	</connectionStrings>
</configuration>


*********************************************************************************************************************************************************
Day 5

DataBase First
-------------

order.cs - automatically generated based on the table in DB
table name - orders
class name - order [ check pluralize/singularize]
one row - one object
one column - one property
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataBaseFirst
{
    using System;
    using System.Collections.Generic;
    
    public partial class order
    {
        public int orderid { get; set; }
        public string customername { get; set; }
        public Nullable<System.DateTime> orderdate { get; set; }
        public Nullable<int> orderamount { get; set; }
    }
}

______________________
OrderEF.comtext.cs - entity framework name
day5Entities - automatically created 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataBaseFirst // name of the project
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    public partial class day5Entities : DbContext // day5Entities is a DBContext class
    {
        public day5Entities()
            : base("name=day5Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<order> orders { get; set; } // orders is the collection, which is the datasource that holds the data
    }
}

---------
program.cs
-----------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Data;
using System.Data.Common;

namespace DataBaseFirst
{
    class Program
    {
        static void Main(string[] args)
        {
            int choice = -1;
            while (true)
            {

                Console.WriteLine("\n1.Add new order");
                Console.WriteLine("2.Display all orders");
                Console.WriteLine("3.Update order amount");
                Console.WriteLine("4.Exit");
                Console.WriteLine("\nEnter your choice");
                choice = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case 1: Add(); break;
                    case 2: Display(); break;
                    case 3: Update(); break;
                    case 4:
                    Environment.Exit(0); break;
                    default:
                        Console.WriteLine("Invalid choice");
                        break;
                }
            }
        }

        private static void Add()
        {
            using (var context = new day5Entities())
            {
                try
                {
                    //1. create an entity to add
                    //2. assign values to properties
                    //3. Invoke Add() method DbSet<T>
                    //4. Invoke SaveChanges() on DbContext
                    var e = new order();

                    Console.WriteLine("Enter id");
                    e.orderid = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine("Enter name");
                    e.customername = Console.ReadLine();
                    Console.WriteLine("Enter date");
                    e.orderdate = Convert.ToDateTime(Console.ReadLine());
                    Console.WriteLine("Enter amount");
                    e.orderamount = Convert.ToInt32(Console.ReadLine());

                    context.orders.Add(e);

                    int RowsAffected = context.SaveChanges();
                    Console.WriteLine($"{RowsAffected} rows added");
                }
                catch (DBConcurrencyException ex)
                {
                    Console.WriteLine(ex.Message);
                }
                catch (DbException ex)
                {
                    Console.WriteLine(ex.Message);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }

        private static void Update()
        {
            using (var context = new day5Entities())
            {

                try
                {
                    //1. search an entity
                    //2. Modify the properties
                    //3. Invoke SaveChanges() on DbContext

                    Console.WriteLine("Enter order id");
                    int id = Convert.ToInt32(Console.ReadLine());
                    var obj = context.orders.Find(id);

                    if (obj != null)
                    {
                       
                        Console.WriteLine("Enter new amount ");
                        obj.orderamount = Convert.ToInt32(Console.ReadLine());

                        int Rows = context.SaveChanges();
                        Console.WriteLine($"{Rows}'s updated");
                    }
                    else
                    {
                        Console.WriteLine($"No orders found for {id}");
                    }

                }
                catch (DBConcurrencyException ex)
                {
                    Console.WriteLine(ex.Message);
                }
                catch (DbException ex)
                {
                    Console.WriteLine(ex.Message);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }

        private static void Display()
        {
            using (var context = new day5Entities())
            {
                try
                {
                    var query = from obj in context.orders
                                select obj;
                    foreach (var ord in query)
                    {
                        Console.WriteLine($"Id={ord.orderid}\tName={ord.customername}\tOrder Date={ord.orderdate} " +
                            $"\tOrderAmount ={ord.orderamount}");
                    }
                }
                catch (DbException ex)
                {
                    Console.WriteLine(ex.Message);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }
        }

      
    }
    


**********************************************************************************************************************************************************
Day 6

MVC
-------

Customer Class - create in Models
contains properties,methods and fields
---------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CustomerApp.Models
{
    public class Customer
    {
        //properties
        public int CustomerId { get; set; }
        public string CustomerName { get; set; }
        public string Email { get; set; }
        public string CustomerType { get; set; }
        public List<String> ContactNos { get; set; }// one customer can have one or more nubers

        public Customer()
        {
            ContactNos = new List<String>();
        }

    }

    }

-------
CustomersControllers - Controllers folder
calls the action which inturn opens respective views in browser
---------------------------------------
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using CustomerApp.Models;
namespace CustomerApp.Controllers 
{
    public class CustomersController : Controller
    {
        public IActionResult Index()
        {
            return View(); // calls Index() method or action
        }
    }
}
------
index.cshtml - is created inside views inside respective class of the model
to display members of the class, assign values and display on web browser.
used to display some thing on browser
------------
@using CustomerApp.Models;
@{
    // to access members of Customer class, include its namespave here
    var customer = new Customer();
    customer.CustomerId = 123;
    customer.CustomerName = "Shanu";
    customer.ContactNos.Add("9168734567"); // can have more mobile nubers
    customer.ContactNos.Add("9168733567");
    customer.Email = "shanu@gmail.com";
    customer.CustomerType = "regular";


}
<html>
<head>

</head>
<body>
    <h3>Customer Details are</h3>
    <h3>Customer Id : @customer.CustomerId</h3>
    <h3>Customer Name : @customer.CustomerName</h3>
    <h3>Customer Email : @customer.Email</h3>
    @foreach(var cust in customer.ContactNos) // display list of mobile numbers that an individual customer holds
            {
                <h3>Customer Mobile Number: @cust</h3>
            }
    <h3>Customer Type : @customer.CustomerType</h3>

</body>
</html>




