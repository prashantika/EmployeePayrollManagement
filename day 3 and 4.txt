Day 1
Grade
-----
/*
        Name : Prashantika
        Date : 23/08/2021
        Description : Fnd average of the maths, physics and chemistry marks of the student and display respective grade
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace grading
{
    class Program
    {

        public static void AverageMarks(int m, int p, int c)
        {
            int avg = (m + p + c) / 3;
            String res = " ";
            if (avg > 90)
            {
                res = "Grade A";
            }
            else if (avg > 80 && avg <= 90)
            {
                res = "Grade B";
            }
            else if (avg > 70 && avg <= 80)
            {
                res = "Grade C";
            }
            else
            {
                if (avg <= 35)
                {
                    res = "Grade D";
                }
            }

            Console.WriteLine($"Total Marks " + (m + p + c));
            Console.WriteLine(res);
            Console.ReadKey();

        }
        static void Main(string[] args)
        {
            int maths, physics, chemistry;
            Console.WriteLine("Enter Maths Marks : ");
            maths = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter Physics Marks : ");
            physics = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter Chemistry Marks : ");
            chemistry = Convert.ToInt32(Console.ReadLine());

            // Console.WriteLine("Grade" + AverageMarks(maths, physics, chemistry));
            AverageMarks(maths, physics, chemistry);


        }
    }
}
*************************************************************************************************************************************************
Day 1
Search Name
-----------

/*
 *  Author : Prashantika
 *  Date : 23/08/21
 *  Description : Search for the given string
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SearchName
{
    class Program
    {
        static void Main(string[] args)
        {
            String[] names =new String[10];
            for(int n=0;n<names.Length;n++)
            {
                Console.WriteLine("Enter person name "+(n+1) );
                names[n] = Console.ReadLine();
            }
            String key;
            Console.WriteLine("Enter the name of the person to be searched");
            key = Console.ReadLine();
            int flag = 1;
            foreach(String name in names)
            {
                if(String.Equals(name,key))
                 {
                    flag = 0;  
                    break;
                }
                else
                {
                   
                    continue;
                }
            }
            if(flag == 0)
            {
                Console.WriteLine(key + "found");
            }
            else
            {
                Console.WriteLine(key + " not found");
            }
            Console.ReadKey();

        }
    }
}

**************************************************************************************************************************************************
Day 1
Arithmetic operations
---------------------

/*
        Name : Prashantika
        Date : 23/08/2021
        Description : Perform arithmetic operations using switch case
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SwitchCase_ArithmeticOperations
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Arithmetic Operations");
            Console.WriteLine("1 -  Add");
            Console.WriteLine("2 - Subtract");
            Console.WriteLine("3 - Multiply");
            Console.WriteLine("4 - Division");
            Console.WriteLine("5 - Remainder");
           Console.WriteLine("Enter you choice");
            int choice = Convert.ToInt32(Console.ReadLine()); // ReadLine returns string data, so explcit conversion to int data
            Console.WriteLine("Enter value of a"); // 
            int a = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter value of b");
            int b = Convert.ToInt32(Console.ReadLine());
            switch (choice)
            {
                case 1: Console.WriteLine($"{a}+{b}="+(a + b)); // {a} - prints the value stored in a, won,t print "a"
                    break;
                case 2:
                    Console.WriteLine($"{a}-{b}=" + (a - b));
                    break;
                case 3:
                    Console.WriteLine($"{a}*{b}=" + (a * b));
                    break;
                case 4:
                    Console.WriteLine($"{a}/{b}=" + (a / b));
                    break;
                case 5:
                    Console.WriteLine($"{a}%{b}=" + (a % b));
                    break;
                default:
                    Console.WriteLine("Invalid Option");
                    break;

            }
            Console.ReadKey();
             



        }
    }
}

**************************************************************************************************************************************************

Day 1
Transpose of a matrix
---------------------

/*
        Name : Prashantika
        Date : 23/08/2021
        Description : Fnd transpose of a 2X2 matrix
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TransposeOfAMatrix
{
    class Program
    {
        static void Main(string[] args)
        {
            int[,] matrix = new int[2,2];
            int[,] result = new int[2, 2];
            Console.WriteLine("Enter 2X2 matrix");
            for(int r=0;r<matrix.GetLength(0);r++)
            {
                for (int c = 0; c < matrix.GetLength(1); c++)
                {
                       matrix[r,c]=Convert.ToInt32(Console.ReadLine());
                }
            }
            for (int r = 0; r < matrix.GetLength(0); r++)
            {
                for (int c = 0; c < matrix.GetLength(1); c++)
                {
                  result[r,c]= matrix[c,r]; // transpose of a matrix = interchange rows and columns
                }
            }
            Console.WriteLine("Before Transpose Of The Matrix");
            for (int r = 0; r < matrix.GetLength(0); r++)
            {
                for (int c = 0; c < matrix.GetLength(1); c++)
                {
                     Console.Write(matrix[r, c]);
                    Console.Write("\t");
                }
                Console.WriteLine();
            }
            Console.WriteLine("After Transpose Of The Matrix");
            for (int r = 0; r < result.GetLength(0); r++)
            {
                for (int c = 0; c<  result.GetLength(1); c++)
                {
                    Console.Write(result[r, c]);
                    Console.Write("\t");
                }
                Console.WriteLine();
            }

            Console.ReadKey();
        }
    }
}

**************************************************************************************************************************************************

Day 2
Restuarant Manager
------------------

**************************************************************************************************************************************************
Day 2
Order Management System
-----------------------

**************************************************************************************************************************************************
Day 2
Accounts
-----------------------


**************************************************************************************************************************************************
day 3
xyz
-----

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace XyzBankLtd // name of the project
{
    public class Account // name of the class created
    {
        //  properties
        public double AccountNo { set; get; }
        public string CustomerName { set; get; }
        private double balance; // field or member
        public double Balance { get { return balance; } } // read only property



      /*
        public Account()
        {
            // minimum balance
            balance = 2000;
        } */

        // methods
        public void Withdraw(double amount)
        {

            
                if (amount > balance)
                {
                    throw new ArgumentException("Insufficient Balnace");

                }
                else
                {
                    balance -= amount;
                }

            

        }
        public void Deposit(double amount)
        {
            
                if (amount <= 0)
                {
                    throw new ArgumentException("Invalid value for amount");
                }
                else
                {
                    balance += amount;
                }
           


        }

        public override string ToString()
        {
            return $"Account no: {this.AccountNo} \nName: {this.CustomerName} \nBalance: {this.Balance}";
        }


    }
}


/*
 *          Name : Prashantika
 *          Date : 25/08/2021
 *          Description : XYZ BANK LTD , allows users to withdraw and deposit the amount in an account.
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace XyzBankLtd
{
    class Program
    {
        static void Main(string[] args)
        {
            Account account = new Account();
            Console.WriteLine("Enter Account no:");
            account.AccountNo = Convert.ToDouble(Console.ReadLine());
            Console.WriteLine("Enter Customer Name:");
            account.CustomerName = Console.ReadLine();
            Console.WriteLine("Available Balance is " + account.Balance);
            try
            {
                while (true)
                {
                    Console.WriteLine("Option Available");
                    Console.WriteLine("1 - Withdraw");
                    Console.WriteLine("2 - Deposit");
                    Console.WriteLine("3 - Exit");
                    int choice = Convert.ToInt32(Console.ReadLine());
                    double amount = 0;

                    switch (choice)
                    {
                        case 1:
                            Console.WriteLine("Amount to be withdraw");

                            amount = Convert.ToDouble(Console.ReadLine());
                            account.Withdraw(amount);
                            // Console.WriteLine("Balance amount is " + account.Balance);
                            Console.WriteLine(account.ToString());
                            break;
                        case 2:
                            Console.WriteLine("Amount to be added");
                            amount = Convert.ToDouble(Console.ReadLine());
                            account.Deposit(amount);
                            // Console.WriteLine("Balance Amount is " + account.Balance);
                            Console.WriteLine(account.ToString());
                            break;
                        case 3:
                            Environment.Exit(0); break;
                        defualt:
                            Console.WriteLine("Invalid options");
                            break;

                    }
                }
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
            }
            Console.ReadKey();
        }
    }
}

**************************************************************************************************************************************************

Day 3
Menu Based List
---------------

/*
 *  Name: Prashantika
 *  Date: 25-8-2021
 *  Description: Menu based list
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MenuBasedList
{
   public  class Program
    {
        // Making EmployeeList global paramaters so all methods can access it, since methods are static, static methods
        // can access only static variables. So making Employee LIst as static variable
        static List <Employee> EmployeeList = new List<Employee>(); 
        static void Add()
        {
            Console.WriteLine("Adding Employee Details");
            // create object of the class to access members of the class
         //   var AddEmployee = new Employee();
            Employee AddEmployee = new Employee();
            Console.WriteLine("Enter Id");
            AddEmployee.Id = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter Name");
            AddEmployee.Name = Console.ReadLine();
            Console.WriteLine("Enter Email");
            AddEmployee.Email = Console.ReadLine();
            Console.WriteLine("Enter Salary");
            AddEmployee.Salary = Convert.ToDouble(Console.ReadLine());
            Console.WriteLine("Enter Location");
            AddEmployee.Location = Console.ReadLine();

            // Add employee details to the EmployeeList Collection
            EmployeeList.Add(AddEmployee);
            Console.WriteLine("Details succefully added");
        }

        static void Display()
        {
            Employee DisplayEmployee = new Employee();
            foreach (Employee employee in EmployeeList )
            {
                Console.WriteLine(employee.ToString()); ;
            }
        }

        static void Delete()
        {
            Employee DeleteEmployee = new Employee();
            Console.WriteLine("Enter ID for deleting");
            DeleteEmployee.Id = Convert.ToInt32(Console.ReadLine());
            int index = EmployeeList.BinarySearch(DeleteEmployee);
            if (index >= 0)
            {
                Console.WriteLine("Emplyee details deleted are");
                Console.WriteLine(EmployeeList[index]);
                //  EmployeeList.Remove(DeleteEmployee); 
                Employee emp =  EmployeeList[index];
                EmployeeList.Remove(emp);
            }
            else
            {
                Console.WriteLine($"{DeleteEmployee.Id} doesn't exists, please give valid ID");
            }

        }
        static void Update()
        {

            Employee UpdateEmployee = new Employee();
            Console.WriteLine("Enter ID for updating");
            UpdateEmployee.Id = Convert.ToInt32(Console.ReadLine());
            int index = EmployeeList.BinarySearch(UpdateEmployee);
            if (index >= 0)
            {
                // respective employee id's details to be updated
                Employee EmployeeToBeUpdate = EmployeeList[index];
                Console.WriteLine("Enter employee name");
                EmployeeToBeUpdate.Name = Console.ReadLine();
                Console.WriteLine("Enter employee email id");
                EmployeeToBeUpdate.Email= Console.ReadLine();
                Console.WriteLine("Enter Salary");
                EmployeeToBeUpdate.Salary = Convert.ToDouble(Console.ReadLine());
                Console.WriteLine("Enter Location name");
                EmployeeToBeUpdate.Location = Console.ReadLine();

                Console.WriteLine("Successfully Updated");
                Console.WriteLine("Updated Employee Details are");
                // Console.WriteLine(EmployeeList[index]);
                Console.WriteLine(EmployeeToBeUpdate.ToString());

            }
            else
            {
                Console.WriteLine($"{UpdateEmployee.Id} doesn't exists");
            }

        }

        static void Search()
        {

            Employee SearchEmployee = new Employee();
            Console.WriteLine("Enter ID for searching");
            SearchEmployee.Id = Convert.ToInt32(Console.ReadLine());
            int index = EmployeeList.BinarySearch(SearchEmployee);
            if (index >= 0)
            {
                
                Console.WriteLine("Employee Details are");
                 Console.WriteLine(EmployeeList[index]);
                

            }
            else
            {
                Console.WriteLine($"{SearchEmployee.Id} doesn't exists");
            }

        }


        static void Main(string[] args)
        {
            int choice = -1;
            while(true) // display menu again and again untill user wants to.
            {
                Console.WriteLine("Menu");
                Console.WriteLine("1.Add New Employee");
                Console.WriteLine("2.List All Employees");
                Console.WriteLine("3.Delete An Employee");
                Console.WriteLine("4.Search for an Employee");
                Console.WriteLine("5.Update Employee Details");
                Console.WriteLine("6.Exit");
                Console.WriteLine("Enter Your Choice:");
                choice = Convert.ToInt32(Console.ReadLine());
                switch(choice)
                {
                    case 1 : Add(); break;
                    case 2:  Display(); break;
                    case 3: Delete(); break;
                    case 4: Search(); break;
                    case 5: Update(); break;
                    case 6: Environment.Exit(0); break;
                    defualt: Console.WriteLine("Invalid Choice"); break;

                }


            }

            // Console.ReadKey();

        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MenuBasedList
{
   public class Employee : IComparable < Employee>
    {
        public int Id { set; get; }
        public string Name { set; get; }
        public string Email { set; get; }
        public double Salary { set; get; }
        public string Location { set; get; }

        // override ToString() of Object Class
        public override string ToString()
        {
            return $"Id: {this.Id} \nName: {this.Name} \nSalary: {this.Salary}" +
                $"Email: {this.Email} \nLocation: {this.Location}";
        }

        public int CompareTo(Employee obj)
        {
            return this.Id.CompareTo(obj.Id);
        }
    }
}


**************************************************************************************************************************************************

Day 3
RTO codes 
---------

/*
 *  Name: Prashantika
 *  Date: 25/08/2021
 *  Description : Dictionary - RTOCodes as keys and DistrictName as Values
 * 
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RTOCodes
{
  public  class Program
    {
        // create a dictionary with name dictionary
        static Dictionary<string, string> dictionary = new Dictionary<String, String>();
        // key
        static string RtoCodes;
        //value
        static string DistrictNames;
        static void Main(string[] args)
        {
            int choice = -1;
            while (true) // display menu again and again untill user wants to.
            {
                Console.WriteLine("Menu");
                Console.WriteLine("1.Add New RTOCode and District");
               
                Console.WriteLine("2. Remove district of given RTOCode");
                Console.WriteLine("3.List All RTOCodes and its respective districts");
                Console.WriteLine("4. Remove RTOCode and District name");
               
                Console.WriteLine("5..Exit");
                Console.WriteLine("Enter Your Choice:");
                choice = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case 1: Add(); break;
                    case 2: RemoveValue(); break;
                    case 3: Display(); break;
                    case 4: Delete(); break; // delets an item - both key and value
                    
                    case 5:
                        Environment.Exit(0); break;
                    defualt: Console.WriteLine("Invalid Choice"); break;

                }


            }
            void Add()
            {
                Console.WriteLine("Enter RTOCode");
                RtoCodes = Console.ReadLine();
                Console.WriteLine("Enter District Name");
                DistrictNames = Console.ReadLine();
                dictionary.Add(RtoCodes, DistrictNames);

            }
             void RemoveValue()
            {
                Console.WriteLine("Enter RTOCode which respective District  has to be deleted");
                RtoCodes = Console.ReadLine();
              
                
                   if(dictionary.ContainsKey(RtoCodes))
                    {
                    // DistrictNames = " ";
                    dictionary[RtoCodes] = " "; // setting value to null of respective key i.e, RtoCode
                       // dictionary.Remove(RtoCodes); // removes key and value of respective key
                    Console.WriteLine("Successfully deleted the value");
                    }
                    else
                    {
                        Console.WriteLine("Invalid Key");
                    }
                    Console.WriteLine("Remainig " + dictionary.Count);
              

            }
        void Display()
            { 
                foreach(KeyValuePair<string,string> KeyValue in dictionary)
                {
                    Console.WriteLine($"RTOCode: {KeyValue.Key} and DistrictName: {KeyValue.Value}");
                }
            }
           void Delete()
            {
                Console.WriteLine("Enter RTOCode of whcih has to be deleted");
                RtoCodes = Console.ReadLine();
                /* Console.WriteLine("Enter District of whcih has to be deleted");
                 DistrictNames = Console.ReadLine(); 
                 dictionary.Remove(DistrictNames); */
                  if (dictionary.ContainsKey(RtoCodes))
                   {
                       dictionary.Remove(RtoCodes); // removes key and value (item) of respective key
                       Console.WriteLine("Successfully deleted the item");
                       Console.WriteLine("Remainig "+dictionary.Count);
                   }
                   else
                   {
                       Console.WriteLine($"{RtoCodes} doesn't exits");
                   }
                

            }

            // Console.ReadKey();

        }
    }
}

****************************************************************************************************************************************************

Day 4

LINQ 
----
/*
 *  Name: Prashantika
 *  Date: 26-08-2021
 *  Description - LINQ - Collections
 *
 */
 using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinqCollection
{
    class Program
    {
        static void Main(string[] args)
        {


             List<Product> GetProducts() // this method returns list of Prodect objects
            {
                var products = new List<Product>() // created list and giving input values via calling
                                                // parameterized constructor
            {
                new Product(101,"Pendrive",1100, "Electronics", new DateTime(2021, 01, 01)),
                new Product(102,"WireLess KeyBoard",3000, "Electronics", new DateTime(2020, 12, 12)),
                new Product(103,"Wireless Mouse",1500, "Electronics", new DateTime(2021, 02, 12)),
                new Product(104,"Formal Shoes",3000, "Clothing", new DateTime(2021, 01, 10)),
                new Product(105,"Formal Shirt",2200, "Clothing", new DateTime(2020, 12, 01)),
            };
                return products;
            }

            var DataSource = GetProducts(); // returns list of objects - step1 common for all queries
             
            
            // task 1 - step 1
             // display all in ascending orderby thier names
            // query
            var query = from p in DataSource
                    orderby p.Name
                    select p;

            // step 2 - display output of the query
            Console.WriteLine("\n all prodcuts displayed ascending orderby thier names ");
            foreach (var prod in query)
            {
                Console.WriteLine(prod.ToString());
            }

            // task 2 - step 1
            // display all products from electronics category where price between 1000 and 2000
            // query
            var query2 = from p in DataSource
                        where p.Price>=1000 && p.Price<=2000 &&  p.Category =="Electronics"
                        select p;

            // step 2 - display output of the query

            Console.WriteLine("\n products from electronics category where price between 1000 and 2000 ");
            foreach (var prod in query2)
            {
                Console.WriteLine(prod.ToString());
            }

            // task 3- step 1
            // display all products whcih are created in 2021
            // query
            var query3 = from p in DataSource
                         where p.CreatedOn.Year==2021
                         select p;

            // step 2 - display output of the query

            Console.WriteLine("\n products which are created in year 2021");
            foreach (var prod in query2)
            {
                Console.WriteLine(prod.ToString());
            }

            Console.ReadKey();
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinqCollection
{
    class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Category { get; set; }
        public DateTime CreatedOn { get; set; }
        public double Price { get; set; }


        // parametrized constrcutor for initializing values

        public Product(int id, string name, double price, string category, DateTime co )
        {
            this.Id = id; this.Name = name; this.Category = category; this.CreatedOn = co; this.Price = price;
        }


        // display 
        public override string ToString()
        {
            return $"Id={this.Id}\t\t Name={this.Name}\t\t City={this.Category}\t\t Price ={ this.Price}" +

                 $"\t\t CreatedON ={ this.CreatedOn.ToShortDateString()}";
        }


    }
}


*****************************************************************************************************************************************************


Day4 
Multi Cast Delegates
--------------------

/*
 *  Name: Prashantika
 *  Date: 26-08-2021
 *  Description - Multi Cast delegates - Calling multiple methodsin single call of delegates
 *
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultiCastDelegate
{
    class Program
    {
        public  delegate void MultiDelegate (int Number1, int Number2); // create delegate
        static void Main(string[] args)
        {

            var CalObj = new Calculator();
            // create object + instantiate
            var Multi = new MultiDelegate(CalObj.Add);
            // add all refernces to delegate object using +
            Multi += CalObj.Multiply;
            Multi += CalObj.Subtract;
            Multi += CalObj.Divide;



            int Num1, Num2;
            Console.WriteLine("Enter 1st number");
            Num1 = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter 2nd number");
            Num2 = Convert.ToInt32(Console.ReadLine());
            


            // invoke delegate which in turn invokes all the methods
            Multi(Num1, Num2);

            Console.ReadKey();

        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultiCastDelegate
{
   public class Calculator
    {
       public void Add(int number1, int number2)
        {
            Console.WriteLine($"{number1}+{number2} = "+(number1 + number2));
        }
        public void Multiply(int number1, int number2)
        {
            Console.WriteLine($"{number1}*{number2} = " + (number1 * number2));

        }
        public void Subtract(int number1, int number2)
        {
            Console.WriteLine($"{number1}-{number2} = " + (number1 - number2));

        }
        public void Divide(int number1, int number2)
        {
            Console.WriteLine($"{number1}/{number2} = " + (number1/ number2));

        }


    }
}

